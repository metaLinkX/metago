@{.import}

@{.const}

export class State {@{range .stateItems}
  public @{.Name} = @{.DefaultValue}; // @{.Dc}@{end}

  constructor(state?: Partial<State>) {
    if (state) {
      Object.assign(this, state);
    }
  }
}

export function newState(state: State | Record<string, any> | null): State {
  if (state !== null) {
    if (state instanceof State) {
      return cloneDeep(state);
    }
    return new State(state);
  }
  return new State();
}

// 表单验证规则
@{ if eq .options.Step.HasRules true }@{.rules}@{end}

// 表格搜索表单
@{ if eq .options.Step.HasSearchForm true }@{.formSchema}@{end}

// 表格列
@{.columns}

@{ if eq .dictOptions.Has true }
// 定义字典选项变量
@{ range $index, $dictType := .options.DictOps.Types }
export const @{ $dictType | LcFirst }DictOptions = ref<any[]>([]);
@{ end }

// 设置字典选项
export function setDictOptions(data: any) {
  @{ range $index, $dictType := .options.DictOps.Types }
  if (data.dict@{ $dictType | LcFirst }Option) {
    @{ $dictType | LcFirst }DictOptions.value = data.dict@{ $dictType | LcFirst }Option;
  }
  @{ end }
}

// 获取字典标签
export function getDictLabel(dictType: string, value: any): string {
  @{ range $index, $dictType := .options.DictOps.Types }
  if (dictType === '@{ $dictType }') {
    const option = @{ $dictType | LcFirst }DictOptions.value.find(item => item.value === value);
    return option ? option.label : '';
  }
  @{ end }
  return '';
}

// 获取字典类型
export function getDictType(dictType: string, value: any): string {
  @{ range $index, $dictType := .options.DictOps.Types }
  if (dictType === '@{ $dictType }') {
    const option = @{ $dictType | LcFirst }DictOptions.value.find(item => item.value === value);
    return option ? option.listClass : 'default';
  }
  @{ end }
  return 'default';
}
@{end}

@{ if eq .options.Step.IsTreeTable true }
// 关系树选项
export const treeOption = ref([]);

// 加载关系树选项
export function loadTreeOption() {
  TreeOption().then((res) => {
    treeOption.value = res;
  });
}
@{end}